# Basic Modulesimport sysimport numpy as np# Neural Networkfrom sklearn.model_selection import train_test_splitimport jsonsys.path.append('./Data Aquisition and Analysis/')  # Folder with All the Helper Filesimport readDataExcel as excelData       # Functions to Save/Read in Data from Excelimport readDataArduino as streamData   # Functions to Read in Data from Arduinosys.path.append('./Machine Learning Modules/')  # Folder with All the Helper Filesimport neuralNetwork as NeuralNetimport KNN as KNNimport SVM as SVM# Channel 1 (bottom of arduino) is the top of the arm# Channel 2 (second lowest) is to the right circular of the arm (Look at hand, go towards pinkie finger)# All channels are on right armif __name__ == "__main__":    # ---------------------------------------------------------------------- #    #    User Parameters to Edit (More Complex Edits are Inside the Files)   #    # ---------------------------------------------------------------------- #    numChannels = 4    xWidth = 2000    moveDataFinger = 200        # General Data Collection Information    serialNum = '85735313333351E040A0'    numDataPoints = 120000  # Number of Points to Stream into the Arduino    seeFullPlot = True    # (NOT IMPLEMENTED YET) Graph the Peak Analysis IN ADDITION TO the Arduino Data    SaveNeuralNetwork = False    testNeuralNetwork = False    optimizeNNParams = False        # User Options (Only One Can be True; Only the First True Variable Excecutes)    streamArduino = False          # Stream in Data from the Arduino    readSignalsFromExcel = False  # Uses the test Data Provided in testDataExcelFile on Sheet testSheetNum    trainNeuralNetwork = True    reAnalyzeTrainingPeaks = False        # Take Data from the Arduino and Save it as an Excel (For Later Use)    if streamArduino or readSignalsFromExcel:        saveInputData = True                              # Saves the Data Streamed into From the Arduino as saveExcelName        saveExcelName = "Samuel Solomon 2021-03-16.xlsx"  # The Name of the Saved File        saveDataFolder = "../Input Data/Training Data/"   # Data Folder to Save the Excel Data; MUST END IN '/'        handMovement = "Release"                 # Speficy the hand Movement You Will Perform    else:        saveInputData = False        # Instead of Arduino Data, Use Test Data from Excel File    if readSignalsFromExcel:        readData = excelData.readExcel(xWidth, moveDataFinger, numChannels)        testDataExcelFile = "../Input Data/Test Data/channel.xlsx" # Path to the Test Data        testSheetNum = 0                     # The Sheet/Tab Order (Zeroth/First/Second/Third) on the Bottom of the Excel Document        # Use Previously Processed Data that was Saved; Extract Features for Training    if reAnalyzeTrainingPeaks or trainNeuralNetwork:        trainDataExcelFolder = "../Input Data/Training Data/"  # Path to the Training Data Folder; All .xlsx Data Used        if trainNeuralNetwork or testNeuralNetwork:        readData = excelData.readExcel(xWidth, moveDataFinger, numChannels)        neuralNetworkName = "V1"        neuralNetworkFolder = "../Neural Network/"        # Saving the Neural network    if SaveNeuralNetwork:        saveNeuralNetworkName = "V1"        saveNeuralNetworkFolder = "./Neural Network/"        # ---------------------------------------------------------------------- #    #                    Parameters User SHOULD NOT Edit                     #    # ---------------------------------------------------------------------- #        # Variables Users Can Change, BUT SHOULDNT    if streamArduino or readSignalsFromExcel:        sheetName = "Trial 1 - "  # If SheetName Already Exists, Excel 1 to Trial #        sheetName = sheetName + handMovement        # ---------------------------------------------------------------------- #    # ---------------------------------------------------------------------- #    # ---------------------------------------------------------------------- #    #           Initiate Neural Network (Should Not Have to Edit)            #    # ---------------------------------------------------------------------- #    # ---------------------------------------------------------------------- #    # ---------------------------------------------------------------------- #        # Define Labels as Array    movementOptions = np.array(["Right", "Left", "Up", "Down", "Grab", "Release"])    movementOptions = np.char.lower(movementOptions)    # Edge Case: User Defines a Movement that Does not Exist, Return Error    if saveInputData and handMovement.lower() not in movementOptions:        print("\nUser Defined an Unknown Hand Gesture")        print("The Gesture", "'" + handMovement.lower() + "'", "is Not in", movementOptions)        sys.exit()        if trainNeuralNetwork or testNeuralNetwork:        outputNeuralNetwork = neuralNetworkFolder + neuralNetworkName        if optimizeNNParams:            optimizeNN = NeuralNet.Helpers(name = outputNeuralNetwork, dataDimension = numChannels, numClasses = len(movementOptions))            neuralNetList = optimizeNN.neuralPermutations()        # Make the Neural Network  (dim = The dimensionality of one data point)         else:            neuralNetList = [NeuralNet.Neural_Network(name = outputNeuralNetwork, dim = numChannels)]            nn = neuralNetList[0]    else:        nn = None            # ---------------------------------------------------------------------- #    # ---------------------------------------------------------------------- #    # ---------------------------------------------------------------------- #    #           Data Collection Program (Should Not Have to Edit)            #    # ---------------------------------------------------------------------- #    # ---------------------------------------------------------------------- #    # ---------------------------------------------------------------------- #              # Stream in Data from Arduino (EMG Signals)    if streamArduino:        readData = streamData.arduinoRead(xWidth, moveDataFinger, numChannels)        readData.streamArduino(numDataPoints, serialNum, seeFullPlot, testNeuralNetwork, nn=nn)    # Take Data from Excel Sheet    elif readSignalsFromExcel:        readData.streamExcelData(testDataExcelFile, seeFullPlot, testNeuralNetwork, testSheetNum, nn=nn)    # Take Preprocessed (Saved) Features from Excel Sheet    elif trainNeuralNetwork:        signalData, signalLabels = readData.getTrainingData(trainDataExcelFolder, movementOptions, mode='Train')        print("\nCollected Signal Data")    elif reAnalyzeTrainingPeaks:        readData.getTrainingData(trainDataExcelFolder, movementOptions, mode='reAnalyze')                    applyNeuralNetML = False    applyKNN = True    applySVM = False        # Train the ML    if trainNeuralNetwork:        # Split the Data into Training and Validation Sets        Training_Data, Testing_Data, Training_Labels, Testing_Labels = train_test_split(signalData, signalLabels, test_size=0.33, shuffle= True, stratify=signalLabels)                if applyKNN:            # Format Labels into 1D Array (Needed for KNN Setup)            Training_LabelsKNN = [np.argmax(i)+1 for i in Training_Labels]            Testing_LabelsKNN = [np.argmax(i)+1 for i in Testing_Labels]            # Apply KNN            kNearestNeighbors = KNN.KNN(len(movementOptions))            kNearestNeighbors.applyKNN(Training_Data, Training_LabelsKNN, Testing_Data, Testing_LabelsKNN)                if applySVM:            # Format Labels into 1D Array (Needed for KNN Setup)            Training_LabelsSVM = [np.argmax(i)+1 for i in Training_Labels]            Testing_LabelsSVM = [np.argmax(i)+1 for i in Testing_Labels]            # Apply KNN            SupportVectorMachine = SVM.SVM(1)            SupportVectorMachine.applySVM(Training_Data, Training_LabelsSVM, Testing_Data, Testing_LabelsSVM)                if applyNeuralNetML:            # Find Best Neural Network            goodNets = {}            for nn in neuralNetList:                try:                      # Train the NN with the Training Data                    Neural_Network_Statistics = nn.train_model(Training_Data, Training_Labels, 300, seeTrainingSteps = False)                    # Make a prediction using new data                    nn.neural_net_prediction(Testing_Data, Testing_Labels)                    # Plot the training loss                        nn.plot_statistics(Neural_Network_Statistics)                                        # Print out the Predictions from the Validation Data to Check                    numRight = 0                    posWrong = [0,0,0,0,0,0]                    predictions = nn.model.predict(Testing_Data)                    for i,testPoint in enumerate(predictions):                                                testingIndex = np.argmax(testPoint)                        testingLabel = movementOptions[testingIndex]                                                realIndex = np.argmax(Testing_Labels[i])                        realLabel = movementOptions[realIndex]                                                #print("Input:", realLabel, "; NN Label:", testingLabel)                        numRight += realLabel == testingLabel                        if realLabel != testingLabel:                            posWrong[realIndex] += 1                    accuracy = numRight/(i+1)                                        #print("\nAccuracy: ", accuracy)                    #print(posWrong)                    #print(movementOptions)                                        optName = nn.opt.get_config()['name']                    if goodNets.get(optName, None) == None:                        goodNets[optName] = {}                    if goodNets[optName].get(accuracy, None) == None:                        goodNets[optName][accuracy] = [str(nn.loss), str(nn.metric)]                    else:                        goodNets[optName][accuracy].extend([str(nn.loss), str(nn.metric)])                except Exception as e:                    loser = 1                    #print("\n", e)                    #print((nn.opt, nn.loss, nn.metric))            with open('./Machine Learning Modules/Ada_star.json', 'w') as outfile:                json.dump(goodNets, outfile, indent=4, sort_keys=True)                print(goodNets)            # Save the Data in Excel: EMG Channels (Cols 1-4); X-Peaks (Cols 5-8); Peak Features (Cols 9-12)    if saveInputData:        saveInputs = excelData.saveExcel(numChannels)        verifiedSave = input("Are you Sure you Want to Save the Data (Y/N): ")        if verifiedSave.upper() == "Y":            saveInputs.saveData(readData.data, readData.xTopGrouping, readData.featureSetGrouping, saveDataFolder, saveExcelName, sheetName, handMovement)        else:            print("User Chose Not to Save the Data")        # Save the Neural Network (The Weights of Each Edge)    if SaveNeuralNetwork and trainNeuralNetwork:        outputNueralNetwork = saveNeuralNetworkName + saveNeuralNetworkName        nn.save_model(outputNueralNetwork)